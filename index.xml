<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michele Scipioni on Michele Scipioni</title>
    <link>https://mscipio.github.io/</link>
    <description>Recent content in Michele Scipioni on Michele Scipioni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Michele Scipioni</copyright>
    <lastBuildDate>Thu, 16 Nov 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Add comments to your Hugo-Academic blog in 10 minutes, using Utteranc.es</title>
      <link>https://mscipio.github.io/post/utterances-comment-engine/</link>
      <pubDate>Mon, 11 Feb 2019 16:00:00 +0100</pubDate>
      
      <guid>https://mscipio.github.io/post/utterances-comment-engine/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://utteranc.es/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Utteranc.es&lt;/strong&gt;&lt;/a&gt; is a lightweigth comments widget, which allows you to use &lt;strong&gt;Github Issues&lt;/strong&gt; for blog comments. It&amp;rsquo;s open source, looks clean, comments are stored on Github, and even comes with a dark theme. Sure, you need to sign with Github, but that&amp;rsquo;s fine since most coders already have an account.&lt;/p&gt;

&lt;h2 id=&#34;installation-steps&#34;&gt;Installation steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;You will, obviously, need to have your website hosted on &lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;, in a &lt;strong&gt;&lt;em&gt;public&lt;/em&gt;&lt;/strong&gt; repository, in order to &lt;em&gt;utterances&lt;/em&gt; to work as intended.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install &lt;a href=&#34;https://github.com/apps/utterances&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;utterances app&lt;/strong&gt;&lt;/a&gt; on that repo. You have a choice to install the app on every (current and future) repo, but I don&amp;rsquo;t think you will have any need for this. Usually you will have a (public) repo with a name like &lt;strong&gt;&lt;em&gt;&amp;lt;username&amp;gt;.github.io&lt;/em&gt;&lt;/strong&gt;: select this from the drop-down menu that will appear:
&lt;p&gt;&lt;img src=&#34;../../img/posts/utterances/app-setup.png&#34; alt=&#34;python-vs-matlab&#34; width=&#34;500&#34; vspace=&#34;150&#34;/&gt;&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Go to &lt;a href=&#34;https://utteranc.es/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;utterances web-app&lt;/strong&gt;&lt;/a&gt; and fill the form as requested. It will generate (at the bottom of the page) a custom &lt;code&gt;html&lt;/code&gt; that you could &lt;em&gt;copy&amp;amp;paste&lt;/em&gt; in your blog template. you will require just a couple of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name of the repository&lt;/strong&gt; : usually, it will be something like &lt;strong&gt;&lt;em&gt;&lt;username\&gt;/&amp;lt;username&amp;gt;.github.io&lt;/em&gt;&lt;/strong&gt; (or more generally &lt;strong&gt;&lt;em&gt;owner/repo&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;label&lt;/strong&gt;: as the comments will be managed via &lt;em&gt;GitHub&lt;/em&gt; Issue system, you will need to set-up a proper label to indentify those issues created by utterances (in case you have other &lt;em&gt;normal&lt;/em&gt; issues as well in you repo)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;theme&lt;/strong&gt;: your choice of a light or dark theme, according to the overall style of your current blog template&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy to your clipboard.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[The following will apply only to &lt;strong&gt;Hugo&lt;/strong&gt; Academic template, but it you are a little bit tech-savy you will find a way to make it work with whatever template you are using, even a custom one] Go to the folder in which the Hugo surce of your blog is hosted, and navigate to &lt;strong&gt;&lt;em&gt;themes/academic/layouts/partials&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the source file &lt;strong&gt;&lt;em&gt;comments.html&lt;/em&gt;&lt;/strong&gt; and replace everything in it with &lt;em&gt;utterances&lt;/em&gt; script code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&amp;quot;https://utteranc.es/client.js&amp;quot;
repo=&amp;quot;mscipio/mscipio.github.io&amp;quot;
issue-term=&amp;quot;pathname&amp;quot;
label=&amp;quot;Comment&amp;quot;
theme=&amp;quot;github-light&amp;quot;
crossorigin=&amp;quot;anonymous&amp;quot;
async&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;That&amp;rsquo;s it! Now, check that everything is set-up correctly in the post template file, which can be found at &lt;strong&gt;&lt;em&gt;themes/academic/layouts/_defaults/single.html&lt;/em&gt;&lt;/strong&gt;. Towards the end you should find something similar to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&amp;quot;article-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
{{ partial &amp;quot;comments.html&amp;quot; . }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Just in case you wanted to activate comments also for the &lt;strong&gt;&lt;em&gt;Publications&lt;/em&gt;&lt;/strong&gt; section provided by the Academic template, just copy the code snippet above and past it in &lt;strong&gt;&lt;em&gt;themes/academic/layouts/publications/single.html&lt;/em&gt;&lt;/strong&gt;, towards the end, just before the &lt;code&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save and deploy, as you normally would.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Voila! Check it out below! 👇&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Calling Matlab (custom) functions from Python</title>
      <link>https://mscipio.github.io/post/matlab-from-python/</link>
      <pubDate>Tue, 05 Feb 2019 10:26:46 +0100</pubDate>
      
      <guid>https://mscipio.github.io/post/matlab-from-python/</guid>
      <description>

&lt;p&gt;Nowadays &lt;em&gt;the ability to write codes&lt;/em&gt; has become an essential skill in technical and scientific disciplines. Either you like it or not, during your studies you will find yourself doing assignments, solving equations or bigger &amp;lsquo;problems&amp;rsquo; of your projects with some sort of coding. And, if you think of going for higher studies and doing some extensive research, then &lt;em&gt;writing codes&lt;/em&gt; is a must know skill for you.&lt;/p&gt;

&lt;p&gt;Quite often, students will become familiar with &lt;em&gt;scientific programming&lt;/em&gt; (note that I am not specifically refferring to CS students, focused on general purpose coding and programming) through &lt;strong&gt;MATLAB&lt;/strong&gt;. The simple reason for that is that MATLAB has been there for scientific computing for a long while, and it has become a legacy language or tool for the scientific community. Engineers and Scientists always needed a programming language that expresses matrix and array mathematics directly, and then MATLAB (matrix laboratory) came into existence. MATLAB is a math and matrix oriented language comes with different types of specialized toolboxes (you have to pay for toolbox) for several purposes e.g. modelling economic data, image analysis or driving a robot. These toolboxes are professionally developed, rigorously tested and well documented for scientific and engineering applications. And that’s why you pay the price for it.&lt;/p&gt;

&lt;p&gt;MATLAB has a solid amount of functions amd an extraordinarily good documentation to start learning, and a large scientific community who have either answered the questions that are going to be asked or will be answered by someone as you post them in the MATLAB Central. There are 365,000 contributors, 120 questions are answered and 25,000 sample scripts or codes are downloaded per day. It has toolboxes for computational biology, computational finances, control systems, data science, image processing and computer vision, machine learning, physical modelling and simulation, robotics, signal processing and communications and IOT.&lt;/p&gt;

&lt;p&gt;On the other side, we have &lt;strong&gt;Python&lt;/strong&gt;, whcih is a much younger programming language, whose history of scientific computing packages, e.g. &lt;code&gt;SciPy&lt;/code&gt;, &lt;code&gt;NumPy&lt;/code&gt;, have not been antiquated. Moreover, in Python you often have to rely on &lt;em&gt;community-authored&lt;/em&gt; packages for scientific and engineering usages. Calling Python as an alternative to MATLAB is technically incorrect. It is a &lt;em&gt;general purpose programming language&lt;/em&gt;, which you to develop fully fledged apps and software tools, and to create applications using any of the major GUI libraries (e.g. Qt), use OpenGL, drive your USB port, etc.&lt;/p&gt;

&lt;p&gt;Being a free, cross-platform, general-purpose and high-level programming language, lots of people are now adopting Python. IDES like pycharm, ipython notebook, jupyter notebook an distributions like anaconda has made python far more usable for researchers. As a result of this popularity, plenty of Python scientific packages have become available with extensive documentation for data visualization, machine learning, natural language processing, complex data analysis and more. For example, scikit-learn includes start-of-the-art ‘Machine Learning’ approaches with very good documentation and tutorials.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;../../img/posts/matlab-from-python/python-matlab1.png&#34; alt=&#34;python-vs-matlab&#34; width=&#34;500&#34; vspace=&#34;150&#34;/&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, choosing between MATLAB and Python is a personal matter, or it could be task-specific. Other times, you may be forced to opt for Python.
Personally, there are some fundamental issues that made me search for an alternative to MATLAB. I think the most fundamental problem with Matlab is its commercial nature, and this is the basis for several issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The algorithms are &lt;strong&gt;proprietary&lt;/strong&gt;, which means you (most of the times) can not see the code of the algorithms you are using and have to trust that Matlab implemented it right.&lt;/li&gt;
&lt;li&gt;Obviously, Matlab is &lt;strong&gt;expensive&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It makes &lt;strong&gt;portability more difficult&lt;/strong&gt;. The portability solution (the Matlab Component Runtime (MCR)) works fine, but Matlab had to take great care that one cannot use it to do generic &lt;em&gt;Matlabing&lt;/em&gt; with it. Maybe this is the reason that the application must be exactly the same version as the installed MCR, which can be a nuisance considering that Matlab releases a new version every 6 months.&lt;/li&gt;
&lt;li&gt;The proprietary nature also makes it &lt;strong&gt;hard&lt;/strong&gt;, if not impossible, for 3th parties &lt;strong&gt;to extend&lt;/strong&gt; or create tools for Matlab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, Matlab has its advantages too:
- It has a &lt;strong&gt;solid amount of functions&lt;/strong&gt;.
- It mights also be &lt;strong&gt;easier to use for beginners&lt;/strong&gt;, because the package includes all, while in Python you need to install extra packages and an IDE.
- It has a &lt;strong&gt;large scientific community&lt;/strong&gt;.
- It is used on many universities (but few companies have the money to buy a license).&lt;/p&gt;

&lt;p&gt;Last point is even more important if you consider the possibility of you working in academic research. It is not so unlikely that your colleagues are more familiar using MATLAB than Python, or that code examples ot functions released alongside published research articles will be written in MATLAB. Moreover, MATLAB supports writing complex (and computationally expensive) function in C/C++ source files, which are later compiled in a proprietary binary format called &lt;strong&gt;&lt;em&gt;MEX&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Long story short:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you are a hardcore Python user and supported but find yourself dealing with MATLAB-friendly colleagues;&lt;/li&gt;
&lt;li&gt;you need to use a function which is shipped as a compiled binary MEX file (meaning that even if you wanted, you cannot read and translate the source to Python, or recompile the C/C++ source in such a way it is possible to call it from Python);&lt;/li&gt;
&lt;li&gt;or simply you like really much how a tool has been implemented in MATLAB (e.g. functions of the Statistical Toolbox, or the Optimization Toolbox, which are really well developed and documented) and you want to directly use them, instead of looking for native Python alternative.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you recognize yourself into one of the previous categories, in the remainder of this post we are going to see a couple of strategies you can use to call MATLAB functions from you Python code, in such a way that they will behave like native Python code, accepting inputs and providing outputs directly into Python current workspace.&lt;/p&gt;

&lt;h2 id=&#34;matlab-api-for-python&#34;&gt;MATLAB API for Python&lt;/h2&gt;

&lt;p&gt;To the MATLAB® Engine API for Python® you will need to have a copy of MATLAB installed in you system. There is no workaround for this, as far as I know, and this is a consequence of MATLAB being a proprietary software.
This API supports almost every version of Python, and requires &lt;strong&gt;CPython&lt;/strong&gt; to be installed on your system, in order to use the referencing of inputs and outputs required to exchange arguments between the two worlds.&lt;/p&gt;

&lt;p&gt;If you satisfies this requirements, the installation of the API is very simple, and it is done as you would do for every Python source code library.
On Linux it sounds like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd &amp;quot;matlabroot/extern/engines/python&amp;quot;
python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where matlabroot is the path where you installed MATLAB on your system.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;The API provides a Python package named &lt;code&gt;matlab&lt;/code&gt; that enables you to call MATLAB functions from Python. You install the package once, and then you can call the engine in your current or future Python sessions. You can import this newly installed package by importing it into your current Python session:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matlab.engine
eng = matlab.engine.start_matlab()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IF you want to keep things separated, and you need to have different sessions/workspaces for MATLAB, within you workflor, you can simply start multiple engines, which won&amp;rsquo;t communicate with each other:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eng1 = matlab.engine.start_matlab()
eng2 = matlab.engine.start_matlab()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To stop a matlab engine you can either quit your current Python session, or explicitly arrest the engine itself:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eng1.exit
eng2.quit()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;call-matlab-built-in-functions-from-python&#34;&gt;Call MATLAB (built-in) functions from Python&lt;/h2&gt;

&lt;p&gt;You can call &lt;strong&gt;any MATLAB function&lt;/strong&gt; directly and return the results to Python. This holds as long as the function can be found in MATLAB&amp;rsquo;s path (we will come beck to this shortly).&lt;/p&gt;

&lt;p&gt;For example, to determine &lt;em&gt;if a number is prime&lt;/em&gt;, use the engine to call the &lt;code&gt;isprime&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;tf = eng.isprime(37)
print(tf)
print(type(tf))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;True
&amp;lt;type &#39;bool&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was a simple one: the MATALB function we call produced only one output, and it was a &amp;lsquo;scalar&amp;rsquo; (actually boolean) output, not an array of some type.&lt;/p&gt;

&lt;p&gt;When you call a function with the engine, &lt;strong&gt;by default the engine returns a single output argument&lt;/strong&gt;. If you know that the function can return multiple arguments, you will need to use the &lt;code&gt;nargout&lt;/code&gt; argument to specify the number of output arguments.&lt;/p&gt;

&lt;p&gt;As an example, to determine the &lt;em&gt;greatest common denominator of two numbers&lt;/em&gt;, use the &lt;code&gt;gcd&lt;/code&gt; function, by setting &lt;code&gt;nargout&lt;/code&gt; to return the three output arguments from &lt;code&gt;gcd&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;t = eng.gcd(100.0,80.0,nargout=3)
print(t)
print(type(t))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;(20.0, 1.0, -1.0)
&amp;lt;type &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;transfering-variables-from-python-to-matlab-workspace&#34;&gt;Transfering variables from Python to MATLAB workspace&lt;/h2&gt;

&lt;p&gt;When you start the engine, it provides an interface to a collection of all MATLAB variables. This collection, named &lt;strong&gt;workspace&lt;/strong&gt;, is implemented as a &lt;strong&gt;Python dictionary&lt;/strong&gt; that is attached to the engine:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of each MATLAB variable becomes a key in the workspace dictionary.&lt;/li&gt;
&lt;li&gt;The keys in workspace must be valid MATLAB identifiers (e.g., you cannot use numbers as keys).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add variables to the engine workspace in Python, and then you can use the variables in MATLAB functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# variable x in Python workspace
x = 4.0
# a new variable called y is added to MATLAB workspace, and is value is set to be equal to Python&#39;s x
eng.workspace[&#39;y&#39;] = x
# we can use variable y while calling MATLAB functions, ad MATLAB is aware of all the variable availabe in its workspace
a = eng.eval(&#39;sqrt(y)&#39;)
print(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, x exists only as a Python variable. Its value is assigned to a new entry in the engine workspace, called y, creating a MATLAB variable. You can then call the MATLAB &lt;code&gt;eval&lt;/code&gt; function to execute the &lt;code&gt;sqrt(y)&lt;/code&gt; statement in MATLAB and return the output value, 2.0, to Python.&lt;/p&gt;

&lt;h2 id=&#34;use-matlab-arrays-in-python&#34;&gt;Use MATLAB Arrays in Python&lt;/h2&gt;

&lt;p&gt;Usually, while working with MATLAB, we are interested in performing complex operations on arrays. The &lt;code&gt;matlab&lt;/code&gt; package provides constructors to create MATLAB arrays in Python. The MATLAB Engine API for Python can pass such arrays as input arguments to MATLAB functions, and can return such arrays as output arguments to Python.&lt;/p&gt;

&lt;p&gt;You can create arrays of any MATLAB numeric or logical type from Python sequence types, as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = matlab.double([1,4,9,16,25])
b = eng.sqrt(a)
print(b)
print(type(b))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1.0,2.0,3.0,4.0,5.0]]
&amp;lt;class &#39;matlab.mlarray.double&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The engine returns b, which is a 1-by-5 &lt;code&gt;matlab.double&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;The same applies if we want to create a &lt;strong&gt;multidimensional array&lt;/strong&gt;. The &lt;code&gt;magic&lt;/code&gt; function returns a 2-D matlab.double array to Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = eng.magic(6)
for x in a: 
    print(x)
print(type(a))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[35.0,1.0,6.0,26.0,19.0,24.0]
[3.0,32.0,7.0,21.0,23.0,25.0]
[31.0,9.0,2.0,22.0,27.0,20.0]
[8.0,28.0,33.0,17.0,10.0,15.0]
[30.0,5.0,34.0,12.0,14.0,16.0]
[4.0,36.0,29.0,13.0,18.0,11.0]
&amp;lt;class &#39;matlab.mlarray.double&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately, &lt;code&gt;matlab&lt;/code&gt; package seems to work only with &lt;strong&gt;&lt;em&gt;pure Python&lt;/em&gt;&lt;/strong&gt; data structures, meaning that we will need to use some tricks if we are interested in working with, e.g., &lt;code&gt;numpy&lt;/code&gt; arrays.
This is important, as usually if we need to call a MATALB function to work on arrays, it is because in Python we were working with arrays and this is usually done via &lt;code&gt;numpy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np

a = np.array([1,2,3,4]).reshape([1,4])
b = a**2
print(type(a))
print(type(b))
print(b)
print(b.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
&amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
[[ 1  4  9 16]]
(1, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We created a &lt;code&gt;numpy&lt;/code&gt; array &lt;em&gt;a&lt;/em&gt;, and then we compute the square of each of its values, yelding another &lt;code&gt;numpy&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;If we try to reproduce this operation using &lt;code&gt;matlab&lt;/code&gt; package we will be stuck in an error as soon as we try to cast the &lt;code&gt;numpy&lt;/code&gt; array &lt;em&gt;a&lt;/em&gt; as a matlab.double array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a_m = matlab.double(a)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&amp;lt;ipython-input-10-1757930e4e37&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 a_m = matlab.double(a)


/media/DATA/miniconda3/envs/tomolab2/lib/python2.7/site-packages/matlab/mlarray.pyc in __init__(self, initializer, size, is_complex)
     49             super(double, self).__init__(&#39;d&#39;, initializer, size, is_complex)
     50         except Exception as ex:
---&amp;gt; 51             raise ex
     52 
     53 


ValueError: initializer must be a rectangular nested sequence
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This happens because &lt;em&gt;matlab.double&lt;/em&gt; function is expecting a list or a tuple as input, and it is unable to understand the &lt;em&gt;numpy.ndarray&lt;/em&gt; datatype.&lt;/p&gt;

&lt;p&gt;A workaraound is to go back to the list format:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a_m = matlab.double(a.tolist()) # casting a as list
b_m = eng.power(a_m,2.0)
print((b_m))
print(type(b_m))
print(b_m.size)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1.0,4.0,9.0,16.0]]
&amp;lt;class &#39;matlab.mlarray.double&#39;&amp;gt;
(1, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are additional problems that we need to face here: the output produced by the call to a MATLAB function is alway os type &lt;em&gt;matlab.mlarray&lt;/em&gt;. This is usefull if it is the endpoint of our computation, but if we need to perform other operations (in Python) on the output of the MATLAB function, this format if of little to no use, for us.&lt;/p&gt;

&lt;p&gt;If we want to be correct, &lt;em&gt;matlab.mlarray&lt;/em&gt; is seen almost as a &lt;em&gt;list&lt;/em&gt; in Python. Basic operations are supported, but even &lt;em&gt;transpose&lt;/em&gt; or &lt;em&gt;reshape&lt;/em&gt; throw errors. To overcome this limitation we can &lt;strong&gt;recast the output as nupmy array&lt;/strong&gt;*.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;b_n = np.asarray(b_m)
print(b_n)
print(type(b_n))
print(b_n.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[ 1.  4.  9. 16.]]
&amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
(1, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be done also in one line of code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a_m = matlab.double(a.tolist()) # casting a as list
b_m = np.asarray(eng.power(a_m,2.0))
print((b_m))
print(type(b_m))
print(b_m.shape)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[ 1.  4.  9. 16.]]
&amp;lt;type &#39;numpy.ndarray&#39;&amp;gt;
(1, 4)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;calling-custom-matlab-user-scripts-and-functions-from-python&#34;&gt;Calling custom MATLAB user scripts and functions from Python&lt;/h2&gt;

&lt;p&gt;So far we have seen how we can use &lt;code&gt;matlab.engine&lt;/code&gt; to call built-in MATLAB functions to perform some computation on data, and strategies to passa data from Python session to MATLAB workspace.&lt;/p&gt;

&lt;p&gt;This is rearely something we are interested in.
Often times, we will be looking for ways to run custom MATLAB code, which can be of different types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;scripts (*.m)&lt;/li&gt;
&lt;li&gt;function (*.m)&lt;/li&gt;
&lt;li&gt;MEX function (*.mexa64)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s start with a very basic example, and let&amp;rsquo;s assume that, again we want to compute the power of an array.&lt;/p&gt;

&lt;p&gt;We can use the following MATLAB code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;b = [1,2,3,4];
e = 2;
r = b.^e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In your current folder, copy this MATLAB code in a file named &lt;em&gt;pow_script.m&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After you save the file, we can call it from within Python like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eng.pow_script(nargout=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;r =

     1     4     9    16
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;eng.workspace[&#39;r&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;matlab.double([[1.0,4.0,9.0,16.0]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifying &lt;code&gt;nargout=0&lt;/code&gt; is &lt;strong&gt;required&lt;/strong&gt;. Although the script prints output, it returns no output arguments to Python.&lt;/p&gt;

&lt;p&gt;Alternatively (and in my opinion more interestingly) we can convert the script to a function and call the function from the engine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;function r = pow_fun(b,e)
    r = b.^e;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the considerations previously made are still valid for a custom user function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;base = np.asarray([1.0,2.0,3.0,4.0])
exp = 2.0
ret = eng.pow_fun(matlab.double(base.tolist()),exp)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(ret)
print(type(ret))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[[1.0,4.0,9.0,16.0]]
&amp;lt;class &#39;matlab.mlarray.double&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And obviously this would allow us also to use complex MEX function within Python, passing Python arrays as input and receiving the output directly as Python variables (or &lt;code&gt;numpy&lt;/code&gt; arrays).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kinetic Compressive Sensing</title>
      <link>https://mscipio.github.io/publication/kinetic-compressive-sensing/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/kinetic-compressive-sensing/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Concurrent Respiratory Motion Correction of Abdominal PET and Dynamic Contrast-Enhanced–MRI Using a Compressed Sensing Approach</title>
      <link>https://mscipio.github.io/publication/concurrent-moco-fuin/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/concurrent-moco-fuin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Probabilistic Graphical Modeling approach to dynamic PET direct parametric map estimation and image reconstruction</title>
      <link>https://mscipio.github.io/publication/pgm-pet/</link>
      <pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/pgm-pet/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Comparison of the clinical performance of upper abdominal PET/DCE-MRI with and without concurrent respiratory motion correction (MoCo)</title>
      <link>https://mscipio.github.io/publication/comparison-moco-catalano/</link>
      <pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/comparison-moco-catalano/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Direct parametric maps estimation from dynamic PET data: an iterated conditional modes approach</title>
      <link>https://mscipio.github.io/publication/icm-em/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/icm-em/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Accelerated PET kinetic maps estimation by analytic fitting method</title>
      <link>https://mscipio.github.io/publication/fast-kinetic-modeling/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/publication/fast-kinetic-modeling/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exending MATLAB&#39;s tools for Negative Binomial distributions: nbin*_mu.m</title>
      <link>https://mscipio.github.io/post/matlab_toolbox_nbin_mu/</link>
      <pubDate>Thu, 16 Nov 2017 10:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/post/matlab_toolbox_nbin_mu/</guid>
      <description>

&lt;hr /&gt;

&lt;p&gt;Introducing a new set of functions able to deal with the common µ-k parametrization of the Negative Binomial distribution for count data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mscipio/MATLABtools___nbin_mu&#34; style=&#34;color:red&#34;&gt;&lt;b&gt;[GitHub SOURCE CODE]&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;negative-binomial-distribution&#34;&gt;Negative Binomial Distribution&lt;/h2&gt;

&lt;p&gt;Negative binomial regression is for modeling count variables, usually for over-dispersed count outcome variables.&lt;/p&gt;

&lt;h4 id=&#34;negative-binomial-regression&#34;&gt;Negative binomial regression&lt;/h4&gt;

&lt;p&gt;Negative binomial regression can be used for over-dispersed count data, that is when the conditional variance exceeds the conditional mean. It can be considered as a generalization of Poisson regression since it has the same mean structure as Poisson regression and it has an extra parameter to model the over-dispersion. If the conditional distribution of the outcome variable is over-dispersed, the confidence intervals for the Negative binomial regression are likely to be narrower as compared to those from a Poisson regression model.&lt;/p&gt;

&lt;h4 id=&#34;poisson-regression&#34;&gt;Poisson regression&lt;/h4&gt;

&lt;p&gt;Poisson regression is often used for modeling count data. Poisson regression has a number of extensions useful for count models.&lt;/p&gt;

&lt;h4 id=&#34;zero-inflated-regression-model&#34;&gt;Zero-inflated regression model&lt;/h4&gt;

&lt;p&gt;Zero-inflated models attempt to account for excess zeros. In other words, two kinds of zeros are thought to exist in the data, “true zeros” and “excess zeros”. Zero-inflated models estimate two equations simultaneously, one for the count model and one for the excess zeros.&lt;/p&gt;

&lt;h4 id=&#34;ols-regression&#34;&gt;OLS regression&lt;/h4&gt;

&lt;p&gt;Count outcome variables are sometimes log-transformed and analyzed using OLS regression. Many issues arise with this approach, including loss of data due to undefined values generated by taking the log of zero (which is undefined), as well as the lack of capacity to model the dispersion.&lt;/p&gt;

&lt;p&gt;Matlab provides some functions to experiments with Negative Binomial Distribution.&lt;/p&gt;

&lt;p&gt;Problem is that, for this parcticular family of distribution, you can find different kind of parametrization. According to the problem you are trying to solve or reproduce, one parametrization can me better than another.&lt;/p&gt;

&lt;p&gt;For a general idea of what I mean by &lt;strong&gt;&lt;em&gt;different parametrization&lt;/em&gt;&lt;/strong&gt;, you can have a look at the Wikipedia page related to NB distribution, at &lt;a href=&#34;https://en.m.wikipedia.org/wiki/Negative_binomial_distribution#Alternative_formulations&#34; target=&#34;_blank&#34;&gt;https://en.m.wikipedia.org/wiki/Negative_binomial_distribution#Alternative_formulations&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;matlab-choice-of-parametrization-r-p&#34;&gt;Matlab choice of parametrization: r-p&lt;/h2&gt;

&lt;p&gt;In its simplest form (when r is an integer), the negative binomial distribution models the number of failures x before a specified number of successes is reached in a series of independent, identical trials. Its parameters are the probability of success in a single trial, p, and the number of successes, r. A special case of the negative binomial distribution, when r = 1, is the geometric distribution, which models the number of failures before the first success.&lt;/p&gt;

&lt;p&gt;More generally, r can take on non-integer values. This form of the negative binomial distribution has no interpretation in terms of repeated trials, but, like the Poisson distribution, it is useful in modeling count data. The negative binomial distribution is more general than the Poisson distribution because it has a variance that is greater than its mean, making it suitable for count data that do not meet the assumptions of the Poisson distribution. In the limit, as r increases to infinity, the negative binomial distribution approaches the Poisson distribution.&lt;/p&gt;

&lt;p&gt;To deal with this version of negative binomial distribution, the &lt;strong&gt;Statistics and Machine Learning Toolbox&lt;/strong&gt; provide the following set of functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;nbinrnd.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinlike.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinfit.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinpdf.m&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ecological-parameterization-of-the-negative-binomial-µ-k&#34;&gt;&amp;ldquo;Ecological&amp;rdquo; parameterization of the negative binomial: µ-k&lt;/h2&gt;

&lt;p&gt;The “ecological” parameterization of the negative binomial replaces the parameters &lt;strong&gt;p&lt;/strong&gt; (probability of success per trial) and &lt;strong&gt;n&lt;/strong&gt; (number of successes before you stop counting failures) with &lt;strong&gt;&lt;em&gt;µ = n(1−p)/p&lt;/em&gt;&lt;/strong&gt;, the mean number of failures expected (or of counts in a sample), and &lt;strong&gt;k&lt;/strong&gt;, which is typically called an &lt;strong&gt;overdispersion&lt;/strong&gt; parameter.&lt;/p&gt;

&lt;p&gt;Confusingly, &lt;strong&gt;k&lt;/strong&gt; is sometimes called &lt;em&gt;size&lt;/em&gt;, because it is mathematically equivalent to &lt;strong&gt;n&lt;/strong&gt; in the failure-process parameterization.&lt;/p&gt;

&lt;p&gt;The overdispersion parameter measures the amount of clustering, or aggregation, or heterogeneity, in the data: a smaller &lt;strong&gt;k&lt;/strong&gt; means more heterogeneity. The variance of the negative binomial distribution is &lt;strong&gt;&lt;em&gt;µ+µ^2/k&lt;/em&gt;&lt;/strong&gt;, and so as &lt;strong&gt;k&lt;/strong&gt; becomes large the variance approaches the mean and the distribution approaches the Poisson distribution. For &lt;em&gt;k &amp;gt; 10&lt;/em&gt;, the negative binomial is hard to tell from a Poisson distribution, but &lt;strong&gt;k&lt;/strong&gt; is often less than 1.&lt;/p&gt;

&lt;p&gt;Specifically, you can get a negative binomial distribution as the result of a Poisson sampling process where the rate **λ **itself varies. If the distribution of &lt;strong&gt;λ&lt;/strong&gt; is a gamma distribution with shape parameter &lt;strong&gt;k&lt;/strong&gt; and mean &lt;strong&gt;µ&lt;/strong&gt;, and &lt;strong&gt;x&lt;/strong&gt; is Poisson-distributed with mean &lt;strong&gt;λ&lt;/strong&gt;, then the distribution of &lt;strong&gt;x&lt;/strong&gt; be a negative binomial distribution with mean &lt;strong&gt;µ&lt;/strong&gt; and overdispersion parameter &lt;strong&gt;k&lt;/strong&gt; (May, 1978; Hilborn and Mangel, 1997). In this case, the negative binomial reflects unmeasured (“random”) variability in the population.&lt;/p&gt;

&lt;p&gt;While available in R, this kind of parametrization is not provided by Matlab most standard libraries, so this repo is about adding them so that you can have a choice of the best version of NB distribution you want to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In detail, the new versions of the Matlab files you can find here are the following&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;nbinrnd_mu.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinlike_mu.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinfit_mu.m&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nbinpdf_mu.m&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MATLAB toolbox: nbin*_mu</title>
      <link>https://mscipio.github.io/project/matlab_nbin_mu/</link>
      <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/project/matlab_nbin_mu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Changelog for KMtoolbox repository - November 14, 2017</title>
      <link>https://mscipio.github.io/post/update_kmtool_repo_14november17/</link>
      <pubDate>Wed, 15 Nov 2017 11:00:00 +0100</pubDate>
      
      <guid>https://mscipio.github.io/post/update_kmtool_repo_14november17/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Fixed some issues on code duplication&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Created a setup file to add all the needed source files to Matlab&amp;rsquo;s path
&lt;img src=&#34;../../img/KMtool_project_page/setup_script.png&#34; alt=&#34;new setup script&#34; title=&#34;new setup script&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added some new colormap and a multiple choice of how to set up colorbar limit to improve the quality of image visualization
&lt;img src=&#34;../../img/KMtool_project_page/new_colormaps.png&#34; alt=&#34;new colormap choices&#34; title=&#34;new colormap choices&#34; /&gt;
&lt;img src=&#34;../../img/KMtool_project_page/new_clim.png&#34; alt=&#34;new clims controls&#34; title=&#34;new clims controls&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added a new example dataset with heart data
&lt;img src=&#34;../../img/KMtool_project_page/heart_dataset.png&#34; alt=&#34;new example heart dataset&#34; title=&#34;new example heart dataset&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Creation of a GitHub repository for lectures material</title>
      <link>https://mscipio.github.io/post/updated-lectures-repository/</link>
      <pubDate>Tue, 14 Nov 2017 13:49:34 +0100</pubDate>
      
      <guid>https://mscipio.github.io/post/updated-lectures-repository/</guid>
      <description>

&lt;h4 id=&#34;new-github-repository-with-material-from-given-lectures-update-nov-2017&#34;&gt;New GitHub repository with material from given lectures (Update Nov 2017)&lt;/h4&gt;

&lt;p&gt;During my Ph.D. at the University of Pisa, I have had the chance to work as a Graduate Teaching Assistant for the following classes:&lt;/p&gt;

&lt;h3 id=&#34;2017&#34;&gt;2017&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[Ing-Inf/06]&lt;/strong&gt;: &lt;span style=&#34;color:blue&#34;&gt;&lt;b&gt;Biomedical Imaging&lt;/b&gt;&lt;/span&gt; (&lt;strong&gt;&lt;em&gt;6 CFU&lt;/em&gt;&lt;/strong&gt;) &lt;span style=&#34;color:red&#34;&gt;&lt;b&gt;(ITA)&lt;/b&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mscipio/Lectures/tree/master/2016/University%20of%20Pisa/Biomedical%20Imaging%20Course/Tracer%20Kinetic%20Modeling%20in%20PET%20dynamic%20imaging&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Iterative reconstruction techniques for emission tomography imaging: ML-EM, OS-EM, and MAP-OSL-EM&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mscipio/Lectures/blob/master/2017/University%20of%20Pisa/Biomedical%20Imaging%20Course/Iterative%20Reconstruction%20in%20Emission%20Tomography/Metodi_Iterativi_10_11_2017.pdf&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;[Download slides]&lt;/strong&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/mscipio/Lectures/blob/master/2017/University%20of%20Pisa/Biomedical%20Imaging%20Course/Iterative%20Reconstruction%20in%20Emission%20Tomography/Ricostruzione_Iterativa_in_Tomografia_2017_2018.pdf&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;[Lecture notes]&lt;/strong&gt;&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2016&#34;&gt;2016&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[Ing-Inf/06]&lt;/strong&gt;: &lt;span style=&#34;color:blue&#34;&gt;&lt;b&gt;Biomedical Imaging&lt;/b&gt;&lt;/span&gt; (&lt;strong&gt;&lt;em&gt;6 CFU&lt;/em&gt;&lt;/strong&gt;) &lt;span style=&#34;color:red&#34;&gt;&lt;b&gt;(ITA)&lt;/b&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mscipio/Lectures/tree/master/2016/University%20of%20Pisa/Biomedical%20Imaging%20Course/Tracer%20Kinetic%20Modeling%20in%20PET%20dynamic%20imaging&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Iterative reconstruction techniques for emission tomography imaging: ML-EM, OS-EM, and MAP-OSL-EM&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;data/teaching/Iterative_reconstruction_of_tomographic_images_28_10_2016.pdf&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;[Download slides]&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mscipio/Lectures/tree/master/2016/University%20of%20Pisa/Biomedical%20Imaging%20Course/Iterative%20Reconstruction%20in%20Emission%20Tomography&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Introduction to kinetic modeling for emission tomography: focus on compartmental models (meaning, use, and interpratation)&lt;/em&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mscipio/Lectures/blob/master/2016/University%20of%20Pisa/Biomedical%20Imaging%20Course/Tracer%20Kinetic%20Modeling%20in%20PET%20dynamic%20imaging/Kinetic_Modeling_01_12_2016.pdf&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;[Part1]&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mscipio/Lectures/blob/master/2016/University%20of%20Pisa/Biomedical%20Imaging%20Course/Tracer%20Kinetic%20Modeling%20in%20PET%20dynamic%20imaging/Kinetic_Modeling_02_12_2016.pdf&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;[Part2]&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kinetic Compressive Sensing</title>
      <link>https://mscipio.github.io/talk/ieee-nss-mic-2017/</link>
      <pubDate>Thu, 26 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/talk/ieee-nss-mic-2017/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;../../data/conferences/IEEE-NSS-MIC-2017/poster.png&#34; alt=&#34;Kinetic Compressive Sensing - EIEEE Nuclear Science Symposium and Medical Imaging Conference - 2017 - poster&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parametric images provide insight into the spatial distribution of physiological parameters, but they are often extremely noisy, due to low SNR of tomographic data. Direct estimation from projections allows accurate noise modeling, improving the results of post-reconstruction fitting. We propose a method, which we name kinetic compressive sensing (KCS), based on a hierarchical Bayesian model and on a novel reconstruction algorithm, that encodes sparsity of kinetic parameters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The model has three key components: the model of the acquisition system; the kinetic model; and a Markov Random Field with an L1-norm cost function, defined in kinetic parameters domain. Parametric maps are reconstructed by maximizing the joint probability, with an Iterated Conditional Modes approach, alternating the optimization of activity time series (OSL-MAP-EM), and kinetic parameters (MAP-LM): a parallel GPU implementation allows synchronized update of all the voxels, computing the gradient of the log joint posterior at each iteration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experiments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;100 noise realizations of a simulated dynamic geometric phantom were generated using a 2TC irreversible model. A bias/variance study confirmed how direct estimates can improve the quality of parametric maps over a post-reconstruction fitting, and showed how the novel sparsity prior can further reduce their variance, without affecting bias. Real FDG PET human brain data (Siemens mMR, 40min) images were also processed. Results enforced how the proposed KCS-regularized direct method can produce spatially coherent images and parametric maps, with lower spatial and better tissue contrast.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Combining sparse kinetic compressive sensing into a direct reconstruction framework can help generating high-quality images and parametric maps, both amenable for display and quantitatively more accurate than what a post-reconstruction fitting can achieve. A GPU-based open source implementation of the algorithm is provided.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CUDA-GPU kinetic modeling</title>
      <link>https://mscipio.github.io/project/gpu-lmfit/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/project/gpu-lmfit/</guid>
      <description>&lt;p&gt;The source code and detailed instruction about how to install and use this toolbox will be provided soon.
Keep checking the website for future updates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Occiput.io</title>
      <link>https://mscipio.github.io/project/occiput/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/project/occiput/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://tomographylab.scienceontheweb.net/&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;&lt;em&gt;OFFICIAL WEBSITE OF THE PROJECT&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Occiput.io&lt;/strong&gt; is an open source software for Tomographic reconstruction based on GPU computing and on Python.&lt;/p&gt;

&lt;p&gt;The design of &lt;em&gt;occiput.io&lt;/em&gt; makes it extremely easy to reconstruct tomographic images starting from the raw data produced by imaging systems: PET, PET-MRI and SPECT. Occiput.io is designed for GPU computing, it’s &lt;strong&gt;&lt;em&gt;blazing fast&lt;/em&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;To date, &lt;strong&gt;Occiput&lt;/strong&gt; and the &lt;strong&gt;NiftyRec&lt;/strong&gt; ray-tracer (on which Occiput is based), have been downloaded more than 12000 times.&lt;/p&gt;

&lt;p&gt;The design of occiput.io enables 2D, 3D (volumetric) and 4D (spatio-temporal) dynamic tomographic imaging, joint reconstruction of multiple parameters (e.g. &lt;em&gt;MLAA&lt;/em&gt;), motion-aware imaging and more.&lt;/p&gt;

&lt;p&gt;Occiput enables the interactive tomographic reconstruction in the cloud, using &lt;strong&gt;&lt;em&gt;Jupyter&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;IPython&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A Python package implementing the interface to the &lt;strong&gt;&lt;em&gt;Siemens Biograph mMR PET-MRI scanner&lt;/em&gt;&lt;/strong&gt; (including access to raw listmode data, sinograms, scatter data, physiological data) is available upon request (occiput.reconstruction@gmail.com). &lt;u&gt;Authorization from Siemens will be required&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;To get started with Occiput, go to the &lt;a href=&#34;https://github.com/TomographyLab/Occiput&#34; target=&#34;_blank&#34;&gt;project source code&lt;/a&gt;  and follow the installation instructions. The source code contains Jupyter notebooks with documentation and examples.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

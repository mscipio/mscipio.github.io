<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scikit Learn on Michele Scipioni</title>
    <link>https://mscipio.github.io/tags/scikit-learn/</link>
    <description>Recent content in Scikit Learn on Michele Scipioni</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Michele Scipioni</copyright>
    <lastBuildDate>Sun, 01 May 2016 11:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mscipio.github.io/tags/scikit-learn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PCA tutorial using scikit-learn python module</title>
      <link>https://mscipio.github.io/post/pca-tutorial-using-scikit-learn-python-module/</link>
      <pubDate>Sun, 01 May 2016 11:00:00 +0000</pubDate>
      
      <guid>https://mscipio.github.io/post/pca-tutorial-using-scikit-learn-python-module/</guid>
      <description>Dimensionality Reduction: Principal Component Analysis in-depth Here we&amp;rsquo;ll explore Principal Component Analysis, which is an extremely useful linear dimensionality reduction technique.
We&amp;rsquo;ll start with our standard set of initial imports:from __future__ import print_function, division %matplotlib inline import numpy as np import matplotlib.pyplot as plt from scipy import stats # use seaborn plotting style defaults import seaborn as sns; sns.set()  Introducing Principal Component Analysis Principal Component Analysis is a very powerful unsupervised method for dimensionality reduction in data.</description>
    </item>
    
  </channel>
</rss>